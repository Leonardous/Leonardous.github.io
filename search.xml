<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Deutch_Dictionary</title>
    <url>/2024/04/14/Deutch-Dictionary/</url>
    <content><![CDATA[<p>14.04.2003</p>
<h2 id="wieder"><a href="#wieder" class="headerlink" title="wieder"></a>wieder</h2><p>adv.<br>释义：<br>再次，又，重新<br>例句：<br>Wieder ist ein Jahr vergangen.</p>
<hr>
<h2 id="der-Rauch"><a href="#der-Rauch" class="headerlink" title="der Rauch"></a>der Rauch</h2><p>n. 不可数<br>释义：<br>烟，烟雾<br>例句：</p>
<ol>
<li>etw. ist Schall und Rauch<br>某事如过眼云烟 [雅句]</li>
<li>Kein Rauch ohne Flamme<br>无火不起烟  [谚语]</li>
<li>etw. geht in Rauch und Flammen auf<br>某物被付之一炬 [雅句]</li>
</ol>
<hr>
<h2 id="die-Firma"><a href="#die-Firma" class="headerlink" title="die Firma"></a>die Firma</h2><p>n. pl: Firmen<br>释义：</p>
<ol>
<li>企业，公司</li>
<li>公司的名称</li>
</ol>
<hr>
<h2 id="verlassen"><a href="#verlassen" class="headerlink" title="verlassen"></a>verlassen</h2><p>adj.<br>释义：</p>
<ol>
<li>荒凉的</li>
<li>孤零零的<br>例句：</li>
<li>einsam und verlassen<br>孑然一身 [雅句]</li>
<li>Das Dorf lag verlassen da.<br>村子荒凉地坐落在这里</li>
</ol>
<p>v.</p>
<ol>
<li>离开</li>
<li>抛弃，离弃<br>例句：<br>Er hat sie wegen einer anderen Frau verlassen.</li>
</ol>
<hr>
<h2 id="teilen"><a href="#teilen" class="headerlink" title="teilen"></a>teilen</h2><hr>
<h2 id="verbeiten"><a href="#verbeiten" class="headerlink" title="verbeiten"></a>verbeiten</h2><hr>
<h2 id="die-Tur"><a href="#die-Tur" class="headerlink" title="die Tür"></a>die Tür</h2><p>n.<br>释义：<br>门</p>
<hr>
<h2 id="der-Grund"><a href="#der-Grund" class="headerlink" title="der Grund"></a>der Grund</h2><hr>
<h2 id="das-Pferd"><a href="#das-Pferd" class="headerlink" title="das Pferd"></a>das Pferd</h2><hr>
<h2 id="der-Busfahrer"><a href="#der-Busfahrer" class="headerlink" title="der Busfahrer"></a>der Busfahrer</h2><hr>
<h2 id="das-Spiel"><a href="#das-Spiel" class="headerlink" title="das Spiel"></a>das Spiel</h2><hr>
<h2 id="einige"><a href="#einige" class="headerlink" title="einige"></a>einige</h2><hr>
<h2 id="die-Leute"><a href="#die-Leute" class="headerlink" title="die Leute"></a>die Leute</h2><hr>
<h2 id="die-Farbe"><a href="#die-Farbe" class="headerlink" title="die Farbe"></a>die Farbe</h2><hr>
<h2 id="fuhren"><a href="#fuhren" class="headerlink" title="führen"></a>führen</h2><hr>
<h2 id="das-Gesetz"><a href="#das-Gesetz" class="headerlink" title="das Gesetz"></a>das Gesetz</h2><p>n.<br>释义：<br>法律</p>
<hr>
<h2 id="das-Flugzeug"><a href="#das-Flugzeug" class="headerlink" title="das Flugzeug"></a>das Flugzeug</h2><p>n.<br>释义：<br>飞机</p>
<hr>
<h2 id="toll-toller-am-tollsten"><a href="#toll-toller-am-tollsten" class="headerlink" title="toll,toller,am tollsten"></a>toll,toller,am tollsten</h2><p>adj.<br>释义：</p>
<ol>
<li>了不起的，极好的</li>
<li>发狂的，发疯的</li>
<li>癫狂的</li>
</ol>
<hr>
<h2 id="Eines-Tages"><a href="#Eines-Tages" class="headerlink" title="Eines Tages"></a>Eines Tages</h2><p>短语<br>释义：<br>有一天</p>
<hr>
<h2 id="dafur"><a href="#dafur" class="headerlink" title="dafür"></a>dafür</h2><p>adv.<br>释义：</p>
<ol>
<li>为此</li>
<li>作为报酬<br>例句：<br>Was hat er dir dafür gegeben?<br>他给了你什么报酬？</li>
</ol>
<hr>
]]></content>
  </entry>
  <entry>
    <title>Adjektivdeklination im Nominativ/Akkusativ/Dativ/</title>
    <url>/2024/04/14/Deutch/</url>
    <content><![CDATA[<p>在不同格中定冠词，不定冠词，形容词等等都会根据其名词的不同性和单复数而变化，以下是需要去熟练使用的变化，记录在此以便随时复习。</p>
<h1 id="Nominativ-第一格"><a href="#Nominativ-第一格" class="headerlink" title="Nominativ 第一格"></a>Nominativ 第一格</h1><table>
<thead>
<tr>
<th>词性</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>M</td>
<td>der nett<strong>e</strong> Mann</td>
<td>ein&#x2F;kein&#x2F;mein nett<strong>er</strong> Mann</td>
<td>nett<strong>er</strong> Mann</td>
</tr>
<tr>
<td>F</td>
<td>die schön<strong>e</strong> Frau</td>
<td>ein<strong>e</strong>&#x2F;kein<strong>e</strong>&#x2F;mein<strong>e</strong> schön<strong>e</strong> Frau</td>
<td>schön<strong>e</strong> Frau</td>
</tr>
<tr>
<td>N</td>
<td>das klein<strong>e</strong> Kind</td>
<td>ein&#x2F;kein&#x2F;mein klein<strong>es</strong> Kind</td>
<td>klein<strong>es</strong> Kind</td>
</tr>
<tr>
<td>P</td>
<td>die rot<strong>en</strong> Rosen</td>
<td>kein<strong>e</strong>&#x2F;mein<strong>e</strong> rot<strong>en</strong> Rosen</td>
<td>alt<strong>e</strong> Bücher</td>
</tr>
</tbody></table>
<h1 id="Akkusativ-第四格"><a href="#Akkusativ-第四格" class="headerlink" title="Akkusativ 第四格"></a>Akkusativ 第四格</h1><table>
<thead>
<tr>
<th>词性</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>M</td>
<td>den gross<strong>en</strong> Hund</td>
<td>ein<strong>en</strong>&#x2F;kein<strong>en</strong>&#x2F;mein<strong>en</strong> gross<strong>en</strong> Hund</td>
<td>gross<strong>en</strong> Hund</td>
</tr>
<tr>
<td>F</td>
<td>die schwarz<strong>e</strong> Katze</td>
<td>ein<strong>e</strong>&#x2F;kein<strong>e</strong>&#x2F;mein<strong>e</strong> schwarz<strong>e</strong> Katze</td>
<td>schwarz<strong>e</strong> Katze</td>
</tr>
<tr>
<td>N</td>
<td>das schick<strong>e</strong> Auto</td>
<td>ein&#x2F;kein&#x2F;mein schick<strong>es</strong> Auto</td>
<td>schick<strong>es</strong> Auto</td>
</tr>
<tr>
<td>P</td>
<td>die neu<strong>en</strong> Schuhe</td>
<td>kein<strong>e</strong>&#x2F;mein<strong>e</strong> neu<strong>en</strong> Schuhe</td>
<td>neu<strong>e</strong> Schuhe</td>
</tr>
</tbody></table>
<h1 id="Dativ-第三格"><a href="#Dativ-第三格" class="headerlink" title="Dativ 第三格"></a>Dativ 第三格</h1><table>
<thead>
<tr>
<th>词性</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>M</td>
<td>dem alt<strong>en</strong> Mann</td>
<td>ein<strong>em</strong>&#x2F;kein<strong>em</strong>&#x2F;mein<strong>em</strong> alt<strong>en</strong> Mann</td>
<td>alt<strong>en</strong> Mann</td>
</tr>
<tr>
<td>F</td>
<td>der schön<strong>en</strong> Frau</td>
<td>ein<strong>er</strong>&#x2F;kein<strong>er</strong>&#x2F;mein<strong>er</strong> schön<strong>en</strong> Frau</td>
<td>schön<strong>er</strong> Frau</td>
</tr>
<tr>
<td>N</td>
<td>dem klein<strong>en</strong> Kind</td>
<td>ein<strong>em</strong>&#x2F;kein<strong>em</strong>&#x2F;mein<strong>em</strong> klein<strong>en</strong> Kind</td>
<td>klein<strong>em</strong> Kind</td>
</tr>
<tr>
<td>P</td>
<td>den rot<strong>en</strong> Rosen</td>
<td>kein<strong>en</strong>&#x2F;mein<strong>en</strong> rot<strong>en</strong> Rosen</td>
<td>alt<strong>en</strong> Bücher</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>德语</tag>
        <tag>A2</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP和UDP</title>
    <url>/2024/03/31/ESP32-S3/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>持续更新</p>
]]></content>
      <tags>
        <tag>ESP32</tag>
        <tag>传输协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Hallo</title>
    <url>/2024/03/30/hello-world/</url>
    <content><![CDATA[<p>welcome！</p>
<span id="more"></span>
<h2 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h2><p>我之后将会在这个博客网站上记录我开发一些项目时遇到的一些我认为有意义的问题，同时也会写一些学习的内容来巩固所学知识，与大家分享。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">printf</span>(<span class="string">&quot;hello,world&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>More info: <a href="www.leonardtin.com">my page</a></p>
<p>The end</p>
]]></content>
  </entry>
  <entry>
    <title>ROS是什么东西？</title>
    <url>/2024/11/27/Ros2Learn1/</url>
    <content><![CDATA[<p>之前并没有学习过ROS，但是觉得这个东西很有用，现在也有一些空闲的时间，于是便打算学习一点新东西。</p>
<h2 id="ROS是什么？"><a href="#ROS是什么？" class="headerlink" title="ROS是什么？"></a>ROS是什么？</h2><p>ROS是 robotic operating system 的缩写，一个能完整工作的较为复杂的机器人通常由非常多部分组成，需要许多资源共同工作，相互传递信息来完成一个任务。<br>然而每一次去开发机器人，都要重新去搞底层的通信架构，有种重新造轮子的感觉，增加工作量，ROS就是来解决这个问题的，让能复用的软件、功能不需要再去重新开发一遍，拿来就用。</p>
<h2 id="ROS1和ROS2的一些区别"><a href="#ROS1和ROS2的一些区别" class="headerlink" title="ROS1和ROS2的一些区别"></a>ROS1和ROS2的一些区别</h2><p>ROS已经广泛应用在很多地方了，但是设计之初的一些缺陷导致他一直停留在一些原型机和实验室里边，难以在工业化生产中真正用到，并且只支持Linux系统<br>ROS2从2014年开始提出，在2022年首次推出一个长期支持版本ROS2 humble，与ROS1相较起来通信延迟更低，可靠性更高，对商业化工业化应用更加友好。取消了master节点，使用基于DDS分布式架构进行通信。<br><img src="/2024/11/27/Ros2Learn1/ROS2andROS.png" alt="aaa"><br>既然要学那就学最新的，在游览许多博客之后，也推荐在当前的情况下可以选择直接去学习ROS2<br>由于之前使用过Ubuntu，而且在后面的实际的机器人项目中大概率还是会使用Linux来进行开发，所以我就使用虚拟机在Ubuntu下使用ROS2</p>
<h2 id="ROS2的下载和配置"><a href="#ROS2的下载和配置" class="headerlink" title="ROS2的下载和配置"></a>ROS2的下载和配置</h2><p>以下的所有操作都是在虚拟机的Ubuntu-22.04.5下进行操作的<br>要学习ROS2的最好方式就是直接上手，这里有两个法子来配置ROS2的环境，一个是直接使用小鱼ROS的集成命令，一条搞定所有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . fishros</span><br></pre></td></tr></table></figure>
<p>另外一个就是跟着官网去下载配置安装，直接百度ROS官网，进去跟着搞<br>在小鱼的自动命令是真的香<br>在Linux中经常会碰到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p>这个命令，sudo在这里指的是：<strong>superuser do</strong>，超级用户 要干！简单点说就和你平时以管理员身份运行一样，通常在运行系统级的任务的时候会用到这个。apt在这里面是Advanced Package Tool的缩写</p>
]]></content>
      <tags>
        <tag>ROS2</tag>
      </tags>
  </entry>
  <entry>
    <title>有关雾化器的研究</title>
    <url>/2024/11/27/atomizer/</url>
    <content><![CDATA[<h2 id="为什么是雾化器"><a href="#为什么是雾化器" class="headerlink" title="为什么是雾化器"></a>为什么是雾化器</h2><p>工学院原有一台雾化器，购入价格较为昂贵，得有5万？因此我本次的毕业设计的主要目的是设计出一个比这雾化器拥有更佳的性能的，学院“国产化”的雾化器。</p>
<h2 id="我需要干什么"><a href="#我需要干什么" class="headerlink" title="我需要干什么"></a>我需要干什么</h2><p>首先从学长那得到了一些建议，和一些需要学习的东西<br>工学院的雾化器我去参观了一下，通过学长的介绍，了解到<br><strong>该雾化器目前主要有几个槽点：</strong><br>1.功率不可调，电源供电模块目测就是个稳压模块，没了<br>2.雾化装置部件不固定，每一次加原料拿出瓶子再装回去都需要繁琐的校正过程<br>3.发热严重，不能一次性用太久<br><strong>我要在这里面做的部分有：</strong><br>1.雾化器的外壳、结构设计<br>2.雾化器控制系统的设计，很可能需要搞个上位机来进行操控<br>3.可调的电源功率模块，通过上位机进行操控<br>4.水冷系统，超声波发生器发热严重，需要水冷来加强可持续使用性。<br>5.雾化仿真，找出最佳的瓶子的角度和位置，主要考虑的变量是瓶子和超声波发生器的距离以及瓶子的倾斜角度。<br>目前我先要去学习一下雾化的整个流程和学长推荐的Comsol来进行流体的仿真</p>
<h2 id="雾化器的原理是什么？"><a href="#雾化器的原理是什么？" class="headerlink" title="雾化器的原理是什么？"></a>雾化器的原理是什么？</h2><p>我在这里主要去学习的是超声波雾化的原理。<br>超声波利用高频振动，将液体分散成微小的武器颗粒，武器的直径再0.5um到10um左右（可能这是评判雾化好坏的一个指标？）超声波雾化器一般的工作频率在几十kHZ到几百kHZ之间。常见的是1MHZ的。<br>不过这里存在一个疑问和可能会在<strong>后面面临的问题</strong>，超声波如何避免去雾化作为介质的水，从而去雾化瓶中的目标液体，目前可能从<strong>超声波频率、超声波能量大小、结构上的改变使得超声波能量集中在瓶子上</strong><br>这是一点需要十分注意的，目标的雾化方式是<strong>间接雾化</strong>，而不是与液体直接接触的。<br>我们先来看普通的雾化器是怎么工作的吧！<br>普通的雾化器的主要核心部件是一个压电陶瓷片，我们通过去改变上面的电压，可以让陶瓷片产生微小的震动，只要往上面施加高频率的电压，就可以让他产生“超声波”，重点来了，压电陶瓷片中心有小孔，小孔并不是一个圆柱体，而是一个漏斗形状的小孔，口小的一边是正面，口大的一边是反面，在压电陶瓷片工作时，无论是在正面还是反面加上水，水都会成雾状从正面喷出来。<br><img src="/2024/11/27/atomizer/small_hole.jpg" alt="陶瓷片微观结构示意图"><br>如图所示，这是雾化器陶瓷片的横截面示意图，蓝色的部分是水，当水在陶瓷片背面时，陶瓷片通过高频振动，带动水通过小孔，而由于小孔呈现漏斗状，流量不变的情况下横截面积变小，流速就会增加，就会从正面加速喷出，由于小孔十分微小，看起来就像水雾喷出了。<br>但是可能会有个问题，那为什么<strong>只会从正面喷出，而不是从背面呢？</strong>这也是因为流量不变的原因，因为流量不变，液体从开口小的地方流向开口大的地方，速度会减缓下来，由于速度不够大（水自身的张力会拉住他），就会在背面堆积起来，堆到一定程度后，就又会像上一段说的一样从正面喷出来了</p>
]]></content>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Gazebo仿真遇到的一些问题</title>
    <url>/2024/12/07/ros-gazebo/</url>
    <content><![CDATA[<h2 id="soildwork导出urdf"><a href="#soildwork导出urdf" class="headerlink" title="soildwork导出urdf"></a>soildwork导出urdf</h2><p>为了将自己的机械臂导入Gazebo进行仿真，首先我们需要在Soildwork上下载一个将soildwork模型转化成urdf文件的插件，可以在ros的官网找到，稍后我插入链接</p>
<p>在安装完插件，导出文件时有一点需要<strong>非常注意</strong>，那就是<strong>导出文件的名称不能有大写字母和中文！！！</strong>这是ros的命名规则，否则在后面进行编译的时候会有错！！！</p>
<p>在导出后，会有以下这几个目录<br><img src="/2024/12/07/ros-gazebo/urdf_file.png" alt="文件目录"><br>忽略掉model.sdf和model.config。这是后面在使用gazebo的时候需要自己再额外搞的。<br>其中，如果我们使用的是ROS2，则需要去CMakeLisits。txt文件中去修改，导出的文件配置是按ROS1来的，点进去CMake文件会发现有catkin，这个是ROS1的工具，要全部改成ament_cmake,可以参考我这个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.5)</span><br><span class="line"></span><br><span class="line">project(leonardoss)</span><br><span class="line"></span><br><span class="line">find_package(ament_cmake REQUIRED)</span><br><span class="line"></span><br><span class="line">ament_package()</span><br><span class="line"></span><br><span class="line">foreach(<span class="built_in">dir</span> config launch meshes urdf)</span><br><span class="line">        install(DIRECTORY <span class="variable">$&#123;dir&#125;</span>/</span><br><span class="line">                DESTINATION share/<span class="variable">$&#123;PROJECT_NAME&#125;</span>/<span class="variable">$&#123;dir&#125;</span>)</span><br><span class="line">endforeach(<span class="built_in">dir</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上是修改过后的CMakeLists.txt文件<br>然后就可以丢到自己搞的ROS2的工作空间里的src，在工作空间里打开终端，使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">colcon build</span><br></pre></td></tr></table></figure>

<p>还没写完，持续更新</p>
]]></content>
      <tags>
        <tag>ROS2</tag>
      </tags>
  </entry>
  <entry>
    <title>在Jetson-Orin-Nano部署Yolov8</title>
    <url>/2025/01/19/Jetson-Orin-Nano-with-Yolov8/</url>
    <content><![CDATA[<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>　　我使用的是Jetson Orin Nano Super，使用的系统是Ubuntu22，安装的Jetpack6.2，可开启最大功率。CUDA版本是12.6。使用GPU进行预测需要安装的的Pytorch版本为2.3，torchvision版本为0.18，torchaudio的版本为2.3。Pytorch版本、torchvision、torchaudio需要根据实际的CUDA的版本来定</p>
<h2 id="1-系统烧录需要准备的："><a href="#1-系统烧录需要准备的：" class="headerlink" title="1.系统烧录需要准备的："></a>1.系统烧录需要准备的：</h2><p>　　1.质量较好的usb转c口的线。这点不能忽视，官方文档当中强调了一些USB电缆可能导致连接错误。如果在刷机过程中出现错误，请考虑换线<br>　　2.至少64G的SD卡，使用前需要用读卡器接电脑格式化<br>　　3.DP转HDMI线缆<br>　　4.支持HDMI的显示屏，初始化需要用到GUI<br>　　5.能直接连接开发板的键盘和鼠标<br>　　6.电脑上要有VMware虚拟机，运行Ubuntu系统（22.04），官方的刷机软件SDK Manager只支持Linux系统，后面用SSH远程终端操作的时候连接也比Windows的putty稳定（我在win11上使用Putty去连接经常出现软件中断）</p>
<p>　　软件资源在我硬盘里，后面或考虑上传某处备份,下面是我用到的一些资源，可以先去找下载下来：<br>　　–Ubuntu 22.04.5LTS.iso 系统映像文件<br>　　–sdkmanager_2.2.0-12028_amd64.deb<br>　　–VMware虚拟机软件<br>　　<strong>在设置虚拟机的时候，把存储空间拉到70G以上，运行内存8G以上！！！</strong></p>
<p>　　<strong>以上条件满足，开干</strong><br>　　以下的操作是建立在你已经安装好虚拟机的情况之上<br>　　在Ubuntu系统中下载好sdkmanager的.deb文件，在终端中打开该文件的所在目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i &lt;你的.deb文件名，不需要括号&gt;</span><br><span class="line">sudo dpkg -i sdkmanager_2.2.0-12028_amd64.deb <span class="comment">#这是示例，我安装这个软件的命令</span></span><br></pre></td></tr></table></figure>
<p>　　如果你之前没接触过Linux系统，那么你需要了解一下命令的含义都是什么<br>　　sudo的意思是：super user do，也就是超级管理员要干这件事，每个终端第一次用sudo的时候会需要你输入密码，就是你的开机密码，输入密码的时候终端不会显示，会隐藏你输入的字符，输入密码直接按回车就行，不要纠结。<br>　　dpkg是用于安装、构建和删除.deb包的工具，-i告诉dpkg去安装后面这个文件，而不是删除或者其他操作。<br>　　运行完后，如果没有什么意外，你会在应用程序当中发现SDK Manager，双击打开<br>　　Host Machine不需要<br>　　我的JetPack选的是6.2，选的最新的,然后点击continue<br><img src="/2025/01/19/Jetson-Orin-Nano-with-Yolov8/01.png" alt="SDKManager界面"><br>　　<strong>在刷机之前，你要短接板子上的两个引脚，分别是FC_REC和GND，让板子进入Recover模式</strong><br><img src="/2025/01/19/Jetson-Orin-Nano-with-Yolov8/01.png" alt="SDKManager界面"><br>　　在这里你可以看到三部分选项，Jetson Linux就是会烧到板子上的系统部分，剩下两个都是Nvidia的工具，在下方点击接受license，然后选择Dowwload now install later。下完之后会自动跳过第三步，直接退出。<br>　　这时候再重新进去，就可以直接安装了<br>　　安装的时候会跳出一个要输入密码的，照常输入就好，然后会跳出来一个框要你输入账号和密码的框，这个就是你之后登录板子的账号和密码<br>　　<strong>这里有一个要注意的，就是第一次安装只装Jetson Linux部分，安装完之后接上显示屏，设置完账号密码之后再进SDK Manager 再安装一次，把剩下两部分安装完</strong><br>　　在安装剩下两部分的时候SDK Manager是通过SSH登录板子系统进行安装的，在安装后两部分的时候会跳出来一个框，要输入登录的账号和密码，就是你之前设置的。<br>　　如果出现连接不上的情况，要么你没初始化好板子（拿显示屏，鼠标，键盘去设置好系统的基础，让他能正常用，给他接上WIFI），要么USB没连接到虚拟机上，要么USB连接上了，系统自动把USB以太网关了（可以在右上角改，会有两个USB有线以太网连接，打开一个就行）</p>
]]></content>
      <tags>
        <tag>ROS2</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在ROS2中使用YOLO</title>
    <url>/2025/01/22/Yolo-detail/</url>
    <content><![CDATA[<h2 id="使用Python去调用Yolo"><a href="#使用Python去调用Yolo" class="headerlink" title="使用Python去调用Yolo"></a>使用Python去调用Yolo</h2><p>　　在之前使用yolo进行预测的时候，大多数通过命令行去执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yolo detect predict model=yolov8n.engine <span class="built_in">source</span>=<span class="string">&#x27;0&#x27;</span> device=0</span><br></pre></td></tr></table></figure>
<p>　　然后它就会打开摄像头，你就可以实时看到yolo处理过后的摄像头的画面，但是它背后是怎么去工作的呢？我之前去使用过yolov5，我的印象当中他有一个predict.py的文件，修改它，再执行就可以了。但是yolov8似乎并没有类似的现成的文件，但是封装性更强了，没有v5的什么一堆配置文件，支持命令行和API的直接调用。<br>　　那就让我们着手去看，一步一步深挖它到底怎么从命令行去调用API最后实现预测的，想省事可以直接跳过，看怎么用API，但是我还是建议跟着看一遍，去打开对应的文件瞧瞧，理解能更深刻一点。<br>　　在我们输入命令的时候，由于我使用的是Anaconda的虚拟环境，它会去环境当中寻找是否有这个命令，也就是是否有yolo这个命令，他一般会存在于：<strong>Anaconda&#x2F;env&#x2F;yolov8&#x2F;bin&#x2F;<strong>这个文件路径当中，其中env代表的是环境，这个文件夹下面会存放你创建的所有环境，yolov8是我自己创建的环境，你会在</strong>bin</strong>当中寻找到yolo这个文件（这里面装的是命令行入口脚本），打开它会有：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/home/djf/anaconda3/envs/yolov8/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> ultralytics.cfg <span class="keyword">import</span> entrypoint</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sys.argv[<span class="number">0</span>] = re.sub(<span class="string">r&quot;(-script\.pyw?|\.exe)?$&quot;</span>, <span class="string">&quot;&quot;</span>, sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(entrypoint())</span><br></pre></td></tr></table></figure>
<p>　　当我们使用命令yolo的时候，他会去执行这个文件，而我们也可以看到，这里面的entrypoint是关键点，我们也可以看到这个函数是从<strong>ultralytics.cfg</strong>当中引入的。<br>　　<strong>ultralytics</strong>是python的一个包，是要使用yolov8的时候下的，让我们顺藤摸瓜摸过去。在Anaconda的虚拟环境下，安装的包一般都会装在：<strong>Anaconda&#x2F;env&#x2F;yolov8&#x2F;lib&#x2F;python3.10&#x2F;site-package</strong>文件夹里面，找到ultralytics的文件夹，打开，再进去cfg文件夹，你会看到他的初始化文件，打开你就看得到entrypoint函数了，这个函数正是用来解析命令行输入的。<br>　　在这里面的代码都可以看看，相关的函数或类都可以依照相同的方法一路摸过去。<br>　　在entrypoint函数里面，最重要的是这几行代码，它告诉我们怎么去调用yolov8来实现检测，以及如何读取返回的结果用于进一步处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line">model = YOLO(model, task=task) <span class="comment">#这里面的model就是命令行当中输入的模型的名字，task就是detect</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>　　以及</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Run command in python</span></span><br><span class="line"><span class="built_in">getattr</span>(model, mode)(**overrides)  <span class="comment"># default args from model mode就是predict overrides就是命令行中你输入的其他内容</span></span><br></pre></td></tr></table></figure>
<p>　　最后getattr这一段等效于（具体的还需要再去挖）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">model.predict(<span class="built_in">source</span>=<span class="string">&quot;0&quot;</span>, device=0)</span><br></pre></td></tr></table></figure>
<p>　　而检测的值就是predict的返回值，返回的结构也可以顺藤摸瓜找出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Args:</span><br><span class="line">    orig_img (numpy.ndarray): The original image <span class="keyword">as</span> a numpy array.</span><br><span class="line">    path (<span class="built_in">str</span>): The path to the image file.</span><br><span class="line">    names (<span class="type">Dict</span>): A dictionary of <span class="keyword">class</span> <span class="title class_">names</span>.</span><br><span class="line">    boxes (torch.Tensor | <span class="literal">None</span>): A 2D tensor of bounding box coordinates <span class="keyword">for</span> each detection.</span><br><span class="line">    masks (torch.Tensor | <span class="literal">None</span>): A 3D tensor of detection masks, where each mask <span class="keyword">is</span> a binary image.</span><br><span class="line">    probs (torch.Tensor | <span class="literal">None</span>): A 1D tensor of probabilities of each <span class="keyword">class</span> <span class="title class_">for</span> classification task.</span><br><span class="line">    keypoints (torch.Tensor | <span class="literal">None</span>): A 2D tensor of keypoint coordinates <span class="keyword">for</span> each detection.</span><br><span class="line">    obb (torch.Tensor | <span class="literal">None</span>): A 2D tensor of oriented bounding box coordinates <span class="keyword">for</span> each detection.</span><br><span class="line">    speed (<span class="type">Dict</span> | <span class="literal">None</span>): A dictionary containing preprocess, inference, <span class="keyword">and</span> postprocess speeds (ms/image).</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">    &gt;&gt;&gt; results = model(<span class="string">&quot;path/to/image.jpg&quot;</span>)</span><br><span class="line">    &gt;&gt;&gt; result = results[<span class="number">0</span>]  <span class="comment"># Get the first result</span></span><br><span class="line">    &gt;&gt;&gt; boxes = result.boxes  <span class="comment"># Get the boxes for the first result</span></span><br><span class="line">    &gt;&gt;&gt; masks = result.masks  <span class="comment"># Get the masks for the first result</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="调用YOLOv8的api"><a href="#调用YOLOv8的api" class="headerlink" title="调用YOLOv8的api"></a>调用YOLOv8的api</h2><p>　　总结一下前面所发现的，可以知道要使用YOLOv8来进行预测，只需要：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line">model = YOLO(model=yolov8n.engine, task=detect)</span><br><span class="line">result = model.predict(source=<span class="string">&#x27;0&#x27;</span>, device=<span class="number">0</span>, conf=<span class="number">0.5</span>, show=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>　　你就得到预测结果啦</p>
]]></content>
      <tags>
        <tag>ROS2</tag>
      </tags>
  </entry>
</search>
